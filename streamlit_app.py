import streamlit as st

st.title('üéà Machine Learning')
st.write('Hello world!')

# H√†m thu th·∫≠p ch·ªâ s·ªë ƒë√°nh gi√° cho m·ªói m√¥ h√¨nh
def get_metrics(y_test, y_pred, model_name):
    report = mt.classification_report(y_test, y_pred, output_dict=True)
    return {
        'model': model_name,
        'precision': report['1']['precision'],
        'recall': report['1']['recall'],
        'f1-score': report['1']['f1-score']
    }

# Thu th·∫≠p k·∫øt qu·∫£ cho t·ª´ng m√¥ h√¨nh
results = [
    get_metrics(y_test, lr.predict(X_test), 'Logistic Regression'),
    get_metrics(y_test, nb.predict(X_test), 'Naive Bayes'),
    get_metrics(y_test, svc.predict(X_test), 'SVM'),
    get_metrics(y_test, rf.predict(X_test), 'Random Forest')
]

# L∆∞u v√†o DataFrame
df_results = pd.DataFrame(results)

# T√≠nh ƒëi·ªÉm trung b√¨nh cho t·ª´ng m√¥ h√¨nh
df_results['mean_score'] = df_results[['precision', 'recall', 'f1-score']].mean(axis=1)

# Ch·ªçn m√¥ h√¨nh t·ªët nh·∫•t (m√¥ h√¨nh c√≥ ƒëi·ªÉm trung b√¨nh cao nh·∫•t)
best_model = df_results.loc[df_results['mean_score'].idxmax()]

# Streamlit giao di·ªán
st.title("So s√°nh M√¥ H√¨nh H·ªçc M√°y")

# Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
st.subheader("B·∫£ng k·∫øt qu·∫£ ƒë√°nh gi√° c·ªßa c√°c m√¥ h√¨nh")
st.dataframe(df_results)

# Hi·ªÉn th·ªã m√¥ h√¨nh t·ªët nh·∫•t
st.subheader("M√¥ H√¨nh T·ªët Nh·∫•t")
st.write(f"**M√¥ h√¨nh t·ªët nh·∫•t l√†:** {best_model['model']}")
st.write(f"**Precision:** {best_model['precision']:.2f}")
st.write(f"**Recall:** {best_model['recall']:.2f}")
st.write(f"**F1-Score:** {best_model['f1-score']:.2f}")
st.write(f"**Mean Score:** {best_model['mean_score']:.2f}")
